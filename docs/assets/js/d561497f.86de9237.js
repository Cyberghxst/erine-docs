"use strict";(self.webpackChunkerine=self.webpackChunkerine||[]).push([[3293],{9613:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(9496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),m=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=m(e.components);return r.createElement(o.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=m(t),d=a,f=c["".concat(o,".").concat(d)]||c[d]||u[d]||i;return t?r.createElement(f,s(s({ref:n},p),{},{components:t})):r.createElement(f,s({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=d;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l[c]="string"==typeof e?e:a,s[1]=l;for(var m=2;m<i;m++)s[m]=t[m];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},186:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var r=t(1163),a=(t(9496),t(9613));const i={sidebar_position:5},s="Parameters",l={unversionedId:"erine@latest/tips/parameters",id:"erine@latest/tips/parameters",title:"Parameters",description:"You can build your command parameters in a easy way using the ParamsBuilder class.",source:"@site/docs/erine@latest/tips/parameters.md",sourceDirName:"erine@latest/tips",slug:"/erine@latest/tips/parameters",permalink:"/docs/erine@latest/tips/parameters",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Handlers",permalink:"/docs/erine@latest/tips/handlers"},next:{title:"Sync slash commands",permalink:"/docs/erine@latest/tips/sync_slash_commands"}},o={},m=[{value:"ParamsBuilder methods.",id:"paramsbuilder-methods",level:2},{value:"Interfaces",id:"interfaces",level:2},{value:"Example",id:"example",level:3}],p={toc:m},c="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"parameters"},"Parameters"),(0,a.kt)("p",null,"You can build your command parameters in a easy way using the ParamsBuilder class."),(0,a.kt)("h2",{id:"paramsbuilder-methods"},"ParamsBuilder methods."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".addAttachment(options)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".addBoolean(options)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".addChannel(options)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".addMember(options)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".addNumber(options)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".addRole(options)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".addString(options)"))),(0,a.kt)("h2",{id:"interfaces"},"Interfaces"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// Any other param that differs from string and number.\ninterface BaseParam {\n    /** The name for this parameter. */\n    name: string\n    /** The description for this parameter. */\n    description: string\n    /** Mark this param as required or not. */\n    required: boolean\n    /** Parameter type. (if needed) */\n    type?: ApplicationCommandOptionType\n    /** Parameter default value. */\n    value?: any\n    /** Mostly to be used for string. Return all arguments after this parameter (including this one) */\n    ellipsis?: boolean\n}\n\ninterface StringParam extends BaseParam {\n    /** String choices. */\n    choices?: { name: string, value: string }[]\n    /** Maximum string length. */\n    max_length?: number\n    /** Minimum string length. */\n    min_length?: number\n}\n\ninterface NumberParam extends BaseParam {\n    /** Maximum number length. */\n    max_value?: number\n    /** Minimum string length. */\n    min_value?: number\n    /** Number choices. */\n    choices?: { name: string, value: string }[]\n}\n\ninterface ChannelParam extends BaseParam {\n    /** An array of allowed channel types. */\n    channel_types?: ChannelType[]\n}\n")),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const { CommandBuilder, ParamsBuilder } = require('erine');\n\nconst data = {\n    data: new CommandBuilder({\n        name: \"say\",\n        as_prefix: true,\n        as_slash: true\n    }),\n    params: new ParamsBuilder()\n        .addString({\n            name: 'message',\n            description: 'The message to say.',\n            required: true,\n            ellipsis: true,\n            max_length: 1000\n        }),\n    async code(context) {\n        const message = context.get('message'); // We can get the parameters using this way.\n        await context.send(message);\n    }\n}\n")))}u.isMDXComponent=!0}}]);