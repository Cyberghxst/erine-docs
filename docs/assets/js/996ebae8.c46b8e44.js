"use strict";(self.webpackChunkerine=self.webpackChunkerine||[]).push([[6675],{9613:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(9496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(t),p=a,f=u["".concat(l,".").concat(p)]||u[p]||m[p]||o;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var d=2;d<o;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},981:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=t(1163),a=(t(9496),t(9613));const o={sidebar_position:4},i="Handlers",s={unversionedId:"erine@latest/tips/handlers",id:"erine@latest/tips/handlers",title:"Handlers",description:"Load commands, events and interactions with Erine Loader.",source:"@site/docs/erine@latest/tips/handlers.md",sourceDirName:"erine@latest/tips",slug:"/erine@latest/tips/handlers",permalink:"/docs/erine@latest/tips/handlers",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Cooldown",permalink:"/docs/erine@latest/tips/cooldown"},next:{title:"Parameters",permalink:"/docs/erine@latest/tips/parameters"}},l={},d=[{value:"Loading commands",id:"loading-commands",level:2},{value:"Loading events",id:"loading-events",level:2},{value:"Loading interactions",id:"loading-interactions",level:2},{value:"All commands, events and interactions must be inside the folder declared in Erine#load.",id:"all-commands-events-and-interactions-must-be-inside-the-folder-declared-in-erineload",level:2}],c={toc:d},u="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"handlers"},"Handlers"),(0,a.kt)("p",null,"Load commands, events and interactions with Erine Loader."),(0,a.kt)("h2",{id:"loading-commands"},"Loading commands"),(0,a.kt)("p",null,"Use CommandBuilder and GroupBuilder classes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const { CommandBuilder, GroupBuilder } = require("erine");\n\nmodule.exports["data"] = [{\n    data: new CommandBuilder({\n        name: "ping",\n        description: "Sends pong."\n    })\n    code: async function(ctx) {\n        await ctx.send("PONG!");\n    }\n},{\n    data: new GroupBuilder({\n        name: "bot",\n        description: "Bot commands."\n    })\n    .addCommand({\n        data: new CommandBuilder({\n            name: "info",\n            description: "Shows bot information."\n        }),\n        code: async function(ctx) {\n            // ... do something\n        }\n    })\n}]\n')),(0,a.kt)("h2",{id:"loading-events"},"Loading events"),(0,a.kt)("p",null,"You must use the EventBuilder class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const { EventBuilder, Events } = require("erine");\n\nconst data = {\n    data: new EventBuilder({\n        name: Events.ClientReady,\n        code: async function(bot) {\n            console.log("Client started, name:", bot.user.username);\n        }\n    })\n}\n\nmodule.exports = { data };\n')),(0,a.kt)("h2",{id:"loading-interactions"},"Loading interactions"),(0,a.kt)("p",null,"You must use InteractionBuilder class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const { InteractionBuilder, Interactions } = require("erine");\n\nconst command = {\n    data: new InteractionBuilder({\n        name: "customID",\n        type: Interactions.Button\n    }),\n    code: async function(interaction) {\n        interaction.reply("Button reply.");\n    }\n}\n\nmodule.exports = { data: command };\n')),(0,a.kt)("h2",{id:"all-commands-events-and-interactions-must-be-inside-the-folder-declared-in-erineload"},"All commands, events and interactions must be inside the folder declared in Erine#load."))}m.isMDXComponent=!0}}]);